using System.Text.RegularExpressions;
using Castle.Core.Logging;
using Lamar;
using Lamar.IoC;

namespace DiFrameworkCons.CompileTimeVsRuntime.ExtractingLibrary;

public static class ExtractingLibrary_Lamar
{
  [Test]
  public static void ShouldAllowEasyExtractionOfLibraryFromCodeUsingLamar()
  {
    //GIVEN
    using var container = new Container(builder =>
    {
      builder.AddTransient<AssetPreprocessor>();
      builder.AddTransient<ProjectConversion>();
      builder.AddTransient<JsonFileReader>();
      builder.ForConcreteType<JsonFileReader>().Configure
        .Ctor<string>().Is("file.json");
      builder.AddTransient<ProjectSectionFormat>();
      builder.ForConcreteType<HeaderFormat>().Configure
        .Ctor<Regex>().Is(new Regex("^.+$"));
      builder.AddTransient<ILogger, ConsoleLogger>();
    });

    //THEN
    // Lamar can describe build plan for the code we intend to extract.
    // The code is not super-readable but can be of great help
    // in restoring the manual composition of to-be-extracted-to-library
    // subgraph
    container.Model.For<ProjectConversion>().Default.DescribeBuildPlan().Should()
      .NotBeNull();

    container.GetRequiredService<AssetPreprocessor>().Should().NotBeNull();
  }
}

/// <summary>
/// This is a slightly cleaned up code generated by describing
/// a build plan on Lamar 13.0.3.
/// </summary>
public class ProjectConversionGenerated
{
  private readonly Regex _regex217491225;
  private readonly string _stringValue1752363900;

  internal ProjectConversionGenerated(
    [Named("Regex")] Regex regex217491225,
    [Named("FileName")] string stringValue1752363900)
  {
    _regex217491225 = regex217491225;
    _stringValue1752363900 = stringValue1752363900;
  }

  public Regex func_headerFormat_Regex { get; set; }
  public string func_jsonFileReader2_FileName { get; set; }

  internal ProjectConversion Build(Scope scope)
  {
    return new ProjectConversion(
      new JsonFileReader(_stringValue1752363900)
      {
        FileName = func_jsonFileReader2_FileName
      },
      new ProjectSectionFormat(),
      new HeaderFormat(_regex217491225)
      {
        Regex = func_headerFormat_Regex
      },
      new ConsoleLogger());
  }
}

